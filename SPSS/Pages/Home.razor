@page "/"
@using System.Text.Json
@using SPSS.Models
@inject HttpClient Http

<PageTitle>Student Index - University Cities Cost Comparison</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-12 text-center mb-5">
            <h1 class="display-4">University Student Index</h1>
            <p class="lead">Find and compare university city costs in the UK</p>
        </div>
    </div>

    <div class="row justify-content-center mb-5">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-body">
                    <h2 class="card-title text-center mb-4">Search for your city</h2>

                    <div class="input-group input-group-lg">
                        <input type="text" class="form-control" placeholder="Start typing city name..." @bind-value="searchTerm" @bind-value:event="oninput" @onkeyup="FilterCities">

                        <button class="btn btn-primary" type="button"> <i class="bi bi-search"></i> Search </button>
                    </div>

                    @if (!string.IsNullOrEmpty(searchTerm) && filteredCities.Count > 0)
                    {
                        <div class="list-group mt-2 search-results" style="max-height: 300px; overflow-y: auto;">
                            @foreach (var city in filteredCities)
                            {
                                <button type="button" class="list-group-item list-group-item-action" @onclick="() => SelectCity(city)">
                                    @city.CityName
                                </button>
                            }
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(searchTerm) && filteredCities.Count == 0)
                    {
                        <div class="alert alert-info mt-2">
                            No cities found matching "@searchTerm"
                        </div>
                    }
                </div>
            </div>
        </div>

        @if (selectedCity != null && !cityComparisonMode)
        {
            <div class="row mb-5">
                <div class="col-12">
                    <div class="card shadow">
                        <div class="card-header bg-primary text-white">
                            <div class="d-flex justify-content-between align-items-center">
                                <h3 class="m-0">@selectedCity.CityName - Weekly Expenses Summary</h3>
                                <div>
                                    <button class="btn btn-sm btn-outline-light me-2" @onclick="() => AddToComparison(selectedCity)">
                                        <i class="bi bi-bar-chart"></i> Compare with other cities
                                    </button>
                                    <button class="btn btn-sm btn-outline-light" @onclick="ClearSelection">
                                        <i class="bi bi-x-lg"></i> Close
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="card-body">
                            @if (selectedCity.Accommodations is not null)
                            {
                                <h4 class="border-bottom pb-2">Accommodation</h4>
                                @if (selectedCity.Accommodations.Halls is not null && selectedCity.Accommodations.Halls.Any())
                                {
                                    <div class="mb-4">
                                        <h5>Halls</h5>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <p><strong>Average Rating:</strong> @GetAverageHallRating(selectedCity).ToString("F2")</p>
                                            </div>
                                            <div class="col-md-4">
                                                <p><strong>Average Price:</strong> £@GetAverageHallPrice(selectedCity).ToString("F2")/week</p>
                                            </div>
                                            <div class="col-md-4">
                                                <p><strong>Average Value for Money:</strong> @GetAverageHallValueForMoney(selectedCity).ToString("F4")</p>
                                            </div>
                                        </div>

                                        <button class="btn btn-outline-primary mt-2" @onclick="ToggleHallsVisibility">
                                            @(showHalls ? "Hide Halls" : "View Halls")
                                        </button>

                                        @if (showHalls)
                                        {
                                            <div class="mt-3">
                                                <div class="mb-3 row">
                                                    <div class="col-md-6">
                                                        <input type="text" class="form-control" placeholder="Filter halls by name" @bind-value="hallFilter" @bind-value:event="oninput">
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="input-group">
                                                            <span class="input-group-text">Sort By</span>
                                                            <select class="form-select" @bind="hallSortOption">
                                                                <option value="name_asc">Name (A-Z)</option>
                                                                <option value="name_desc">Name (Z-A)</option>
                                                                <option value="rating_asc">Rating (Low to High)</option>
                                                                <option value="rating_desc">Rating (High to Low)</option>
                                                                <option value="price_asc">Price (Low to High)</option>
                                                                <option value="price_desc">Price (High to Low)</option>
                                                                <option value="value_asc">Value for Money (Low to High)</option>
                                                                <option value="value_desc">Value for Money (High to Low)</option>
                                                            </select>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="table-responsive">
                                                    <table class="table table-striped table-hover">
                                                        <thead>
                                                            <tr>
                                                                <th>Name</th>
                                                                <th>Price (£/week)</th>
                                                                <th>Rating</th>
                                                                <th>Value for Money</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var hall in GetFilteredAndSortedHalls())
                                                            {
                                                                <tr>
                                                                    <td>@hall.Name</td>
                                                                    <td>£@hall.Price</td>
                                                                    <td>@hall.Ratings</td>
                                                                    <td>@CalculateValueForMoney(hall).ToString("F4")</td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }

                                @if (selectedCity.Accommodations.Houses?.Any() == true)
                                {
                                    <div class="mb-4">
                                        <h5>Houses</h5>
                                        @foreach (var house in selectedCity.Accommodations.Houses)
                                        {
                                            <p><strong>Average Monthly Rent:</strong> £@house.AvePerMonth</p>
                                            <p><strong>Average Weekly Rent:</strong> £@((house.AvePerMonth * 12 / 52).ToString("F2"))</p>
                                        }
                                    </div>
                                }
                            }

                            @if (selectedCity.Groceries is not null && selectedCity.Groceries.Accommodations is not null && selectedCity.Groceries.Accommodations.Any())
                            {
                                <h4 class="border-bottom pb-2 mt-4">Groceries</h4>
                                <p><strong>Average Weekly Grocery Cost:</strong> £@GetAverageGroceryCost(selectedCity).ToString("F2")</p>

                                <div class="mt-3">
                                    <h5>Available Supermarkets</h5>
                                    <div class="d-flex flex-wrap gap-2">
                                        @foreach (var supermarket in GetUniqueSupermarkets(selectedCity))
                                        {
                                            <span class="badge bg-info">@supermarket</span>
                                        }
                                    </div>
                                </div>

                                @if (GetUniversitiesInCity(selectedCity.Id).Any())
                                {
                                    <div class="mt-4">
                                        <h5>University-Specific Grocery Information</h5>
                                        @foreach (var uni in GetUniversitiesInCity(selectedCity.Id))
                                        {
                                            <div class="mb-3">
                                                <p><strong>@uni.UniversityName:</strong> £@GetUniversityGroceryCost(uni.Id, selectedCity).ToString("F2")/week</p>
                                                <div class="d-flex flex-wrap gap-2">
                                                    <small>Nearest supermarkets:</small>
                                                    @foreach (var supermarket in GetUniSupermarkets(uni.Id, selectedCity))
                                                    {
                                                        <span class="badge bg-secondary">@supermarket</span>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            }

                            @if (selectedCity.Jobs is not null)
                            {
                                <h4 class="border-bottom pb-2 mt-4">Employment</h4>
                                <div class="row">
                                    <div class="col-md-4">
                                        <p><strong>Available Student Jobs:</strong> @(selectedCity.Jobs.PartTimeJobPostings ?? "Data not available")</p>
                                    </div>
                                    <div class="col-md-4">
                                        <p><strong>Median Wage:</strong> £@(selectedCity.Jobs.MedianWage)/hour</p>
                                    </div>
                                    <div class="col-md-4">
                                        <p><strong>Employment Rate:</strong> @((selectedCity.Jobs.EmploymentRate * 100).ToString("F0"))%</p>
                                    </div>
                                </div>
                            }

                            @if (selectedCity.Entertainment is not null)
                            {
                                <h4 class="border-bottom pb-2 mt-4">Entertainment</h4>
                                <div class="row">
                                    <div class="col-md-4">
                                        <p><strong>Going Out:</strong> £@selectedCity.Entertainment.GoingOut.ToString("F2")/week</p>
                                    </div>
                                    <div class="col-md-4">
                                        <p><strong>Health & Wellness:</strong> £@selectedCity.Entertainment.HealthAndWellness.ToString("F2")/week</p>
                                    </div>
                                    <div class="col-md-4">
                                        <p><strong>Holidays & Events:</strong> £@selectedCity.Entertainment.HolidayAndEvents.ToString("F2")/week</p>
                                    </div>
                                </div>
                                <p><strong>Total Entertainment Cost:</strong> £@GetTotalEntertainmentCost(selectedCity).ToString("F2")/week</p>
                            }

                        </div>
                    </div>
                </div>
            </div>
        }

        @if (selectedCities.Count > 0)
        {
            <div class="row mb-5">
                <div class="col-12 mb-4">
                    <div class="d-flex justify-content-between align-items-center">
                        <h2>City Comparison</h2>
                        @if (selectedCities.Count < 3)
                        {
                            <button class="btn btn-outline-primary" @onclick="() => isAddingToComparison = true">
                                <i class="bi bi-plus-lg"></i> Add City to Compare
                            </button>
                        }
                    </div>
                </div>

                @foreach (var city in selectedCities)
                {
                    <div class="col-md-@(12 / Math.Max(1, Math.Min(selectedCities.Count, 3)))">
                        <div class="card shadow h-100">
                            <div class="card-header bg-primary text-white">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="m-0">@city.CityName</h5>
                                    <button class="btn btn-sm btn-outline-light"
                                            @onclick="() => RemoveCity(city)">
                                        <i class="bi bi-x-lg"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                @if (city.Accommodations is not null)
                                {
                                    <h6 class="border-bottom pb-2">Accommodation</h6>
                                    @if (city.Accommodations.Halls is not null && city.Accommodations.Halls.Any())
                                    {
                                        <div class="mb-3">
                                            <p class="mb-1"><strong>Average Hall Rating:</strong> @GetAverageHallRating(city).ToString("F2")</p>
                                            <p class="mb-1"><strong>Average Hall Price:</strong> £@GetAverageHallPrice(city).ToString("F2")/week</p>
                                            <p class="mb-1"><strong>Average Hall Value:</strong> @GetAverageHallValueForMoney(city).ToString("F4")</p>
                                        </div>
                                    }

                                    @if (city.Accommodations.Houses?.Any() == true)
                                    {
                                        <div class="mb-3">
                                            <p class="mb-1">
                                                <strong>Average House Rent:</strong>
                                                £@((city.Accommodations.Houses.Average(h => h.AvePerMonth) * 12 / 52).ToString("F2"))/week
                                            </p>
                                        </div>
                                    }
                                }

                                @if (city.Groceries is not null && city.Groceries.Accommodations is not null && city.Groceries.Accommodations.Any())
                                {
                                    <h6 class="border-bottom pb-2 mt-3">Groceries</h6>
                                    <p class="mb-1"><strong>Avg Grocery Cost:</strong> £@GetAverageGroceryCost(city).ToString("F2")/week</p>
                                }

                                @if (city.Entertainment is not null)
                                {
                                    <h6 class="border-bottom pb-2 mt-3">Entertainment</h6>
                                    <p class="mb-1"><strong>Total Entertainment:</strong> £@GetTotalEntertainmentCost(city).ToString("F2")/week</p>
                                }

                                @if (city.Jobs is not null)
                                {
                                    <h6 class="border-bottom pb-2 mt-3">Employment</h6>
                                    <p class="mb-1"><strong>Student Jobs:</strong> @(city.Jobs.PartTimeJobPostings ?? "Data not available")</p>
                                    <p class="mb-1"><strong>Median Wage:</strong> £@(city.Jobs.MedianWage)/hour</p>
                                }
                            </div>
                            <div class="card-footer">
                                <button class="btn btn-outline-primary w-100" @onclick="() => ViewFullDetails(city)">
                                    View Full Details
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

    </div>

</div>

@code {
    private string searchTerm = string.Empty;
    private List<University> allUniversities = new();
    private List<City> allCities = new();
    private Dictionary<int, City> citiesById = new();
    private List<University> filteredUniversities = new();
    private List<City> filteredCities = new();
    private List<City> selectedCities = new();
    private City? selectedCity = null;
    private bool cityComparisonMode = false;
    private int selectedWeeks = 44;
    private bool isAddingToComparison = false;

    private bool showHalls = false;
    private string hallFilter = string.Empty;
    private string hallSortOption = "name_asc";

    protected override async Task OnInitializedAsync()
    {
        await LoadCities();
        await LoadUniversities();
    }

    private async Task LoadCities()
    {
        allCities = await Http.GetFromJsonAsync<List<City>>("data/cities.json") ?? [];
        citiesById = allCities.ToDictionary(c => c.Id);
    }

    private async Task LoadUniversities()
    {
        allUniversities = await Http.GetFromJsonAsync<List<University>>("data/universities.json") ?? [];
    }

    private void FilterUniversities()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredUniversities.Clear();
            return;
        }

        filteredUniversities = allUniversities
            .Where(u => u.UniversityName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                      GetCityName(u.CityId).Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void FilterCities()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCities.Clear();
            return;
        }

        filteredCities = allCities
            .Where(c => c.CityName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private string GetCityName(int cityId)
    {
        return citiesById.TryGetValue(cityId, out var city) ? city.CityName : "Unknown";
    }

    private void SelectCity(City city)
    {
        if (isAddingToComparison)
        {
            if (!selectedCities.Any(c => c.Id == city.Id) && selectedCities.Count < 3)
            {
                selectedCities.Add(city);
            }
            isAddingToComparison = false;
            cityComparisonMode = true;
        }
        else if (!cityComparisonMode)
        {
            selectedCity = city;
        }

        searchTerm = string.Empty;
        filteredCities.Clear();
        showHalls = false;
        hallFilter = string.Empty;
    }

    private void RemoveCity(City city)
    {
        selectedCities.RemoveAll(c => c.Id == city.Id);
        if (selectedCities.Count == 0)
        {
            cityComparisonMode = false;
        }
    }

    private void ClearSelection()
    {
        selectedCity = null;
        selectedCities.Clear();
        cityComparisonMode = false;
    }

    private void ToggleHallsVisibility()
    {
        showHalls = !showHalls;
    }

    private decimal GetAverageHallRating(City city)
    {
        if (city.Accommodations?.Halls is null || !city.Accommodations.Halls.Any())
            return 0;

        return city.Accommodations.Halls.Average(h => h.Ratings);
    }

    private decimal GetAverageHallPrice(City city)
    {
        if (city.Accommodations?.Halls is null || !city.Accommodations.Halls.Any())
            return 0;

        var hallsWithPrice = city.Accommodations.Halls.Where(h => h.Price > 0);
        if (!hallsWithPrice.Any())
            return 0;

        return hallsWithPrice.Average(h => h.Price);
    }

    private decimal GetAverageHallValueForMoney(City city)
    {
        if (city.Accommodations?.Halls is null || !city.Accommodations.Halls.Any())
            return 0;

        var validHalls = city.Accommodations.Halls
            .Where(h => h.Ratings > 0 && h.Price > 0);

        if (!validHalls.Any())
            return 0;

        return Math.Round(validHalls.Average(h => h.Ratings / h.Price), 4);
    }

    private decimal CalculateValueForMoney(dynamic hall)
    {
        if (hall.Ratings > 0 && hall.Price > 0)
            return Math.Round((decimal)hall.Ratings / (decimal)hall.Price, 4);
        return 0;
    }

    private List<HallInfo> GetFilteredAndSortedHalls()
    {
        if (selectedCity?.Accommodations?.Halls is null)
            return [];

        List<HallInfo> filteredHalls = string.IsNullOrWhiteSpace(hallFilter)
            ? selectedCity.Accommodations.Halls
            : selectedCity.Accommodations.Halls
                .Where(h => h.Name?.Contains(hallFilter, StringComparison.OrdinalIgnoreCase) ?? false)
                .ToList();

        switch (hallSortOption)
        {
            case "name_asc":
                return filteredHalls.OrderBy(h => h.Name).ToList();
            case "name_desc":
                return filteredHalls.OrderByDescending(h => h.Name).ToList();
            case "rating_asc":
                return filteredHalls.OrderBy(h => h.Ratings).ToList();
            case "rating_desc":
                return filteredHalls.OrderByDescending(h => h.Ratings).ToList();
            case "price_asc":
                return filteredHalls.OrderBy(h => h.Price).ToList();
            case "price_desc":
                return filteredHalls.OrderByDescending(h => h.Price).ToList();
            case "value_asc":
                return filteredHalls.OrderBy(h => CalculateValueForMoney(h)).ToList();
            case "value_desc":
                return filteredHalls.OrderByDescending(h => CalculateValueForMoney(h)).ToList();
            default:
                return filteredHalls.ToList();
        }
    }

    private decimal GetAverageGroceryCost(City city)
    {
        if (city.Groceries?.Accommodations is null || !city.Groceries.Accommodations.Any())
            return 0;

        return city.Groceries.Accommodations.Average(a => a.AverageSupermarketCost);
    }

    private List<string> GetUniqueSupermarkets(City city)
    {
        if (city.Groceries?.Accommodations is null)
            return [];

        return city.Groceries.Accommodations
            .Select(a => a.NearestSupermarket)
            .Distinct()
            .OrderBy(s => s)
            .ToList();
    }

    private List<University> GetUniversitiesInCity(int cityId)
    {
        return allUniversities.Where(u => u.CityId == cityId).ToList();
    }

    private decimal GetUniversityGroceryCost(int universityId, City city)
    {
        if (city.Groceries?.Accommodations is null || !city.Groceries.Accommodations.Any())
            return 0;

        var uniAccommodations = city.Groceries.Accommodations
            .Where(a => a.UniversityId == universityId);

        return uniAccommodations.Any()
            ? uniAccommodations.Average(a => a.AverageSupermarketCost)
            : 0;
    }

    private List<string> GetUniSupermarkets(int universityId, City city)
    {
        if (city.Groceries?.Accommodations is null)
            return [];

        return city.Groceries.Accommodations
            .Where(a => a.UniversityId == universityId)
            .Select(a => a.NearestSupermarket)
            .Distinct()
            .ToList();
    }

    private decimal GetTotalEntertainmentCost(City city)
    {
        if (city.Entertainment is null)
            return 0;

        return city.Entertainment.GoingOut + city.Entertainment.HealthAndWellness + city.Entertainment.HolidayAndEvents;
    }

    private List<AccommodationInfo> GetRelevantAccommodations(University university, City city)
    {
        if (city?.Groceries?.Accommodations is null)
            return [];

        return city.Groceries.Accommodations
            .Where(a => !a.UniversityOwned || (a.UniversityOwned && a.UniversityId == university.Id))
            .ToList();
    }

    private string GetGroceriesCost(University university, City city)
    {
        var accommodations = GetRelevantAccommodations(university, city);
        if (!accommodations.Any())
            return "0.00";

        decimal averageCost = accommodations.Average(a => a.AverageSupermarketCost);
        return averageCost.ToString("F2");
    }

    private string GetAccommodationCost(University university, City city)
    {
        var accommodations = GetRelevantAccommodations(university, city);
        if (!accommodations.Any())
            return "0.00";

        var uniOwned = accommodations.Where(a => a.UniversityOwned).ToList();
        if (uniOwned.Any())
        {
            return uniOwned.Average(a => a.AccommodationCostPerWeek).ToString("F2");
        }

        return accommodations.Average(a => a.AccommodationCostPerWeek).ToString("F2");
    }

    private string GetEntertainmentCost(City city)
    {
        if (city?.Entertainment is null)
            return "0.00";

        decimal total = 0;
        if (city.Entertainment.GoingOut > 0) total += city.Entertainment.GoingOut;
        if (city.Entertainment.HealthAndWellness > 0) total += city.Entertainment.HealthAndWellness;
        if (city.Entertainment.HolidayAndEvents > 0) total += city.Entertainment.HolidayAndEvents;

        return total.ToString("F2");
    }

    private decimal CalculateTotalCost(University university, City city, int weeks)
    {
        decimal groceries = decimal.TryParse(GetGroceriesCost(university, city), out var g) ? g : 0;
        decimal entertainment = decimal.TryParse(GetEntertainmentCost(city), out var e) ? e : 0;
        decimal accommodation = decimal.TryParse(GetAccommodationCost(university, city), out var a) ? a : 0;

        return (groceries + entertainment + accommodation) * weeks;
    }

    private string FormatCost(string cost)
    {
        return string.IsNullOrEmpty(cost) ? "Data not available" : $"£{cost}/week";
    }

    private void ViewFullDetails(City city)
    {
        selectedCity = city;
        cityComparisonMode = false;
        selectedCities.Clear();
    }

    private void AddToComparison(City city)
    {
        if (!selectedCities.Any(c => c.Id == city.Id))
            selectedCities.Add(city);

        cityComparisonMode = true;
        selectedCity = null;
        isAddingToComparison = true;
    }
}