@page "/"
@using System.Text.Json
@using SPSS.Models
@inject HttpClient Http

<PageTitle>Student Index - University Cost Comparison</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-12 text-center mb-5">
            <h1 class="display-4">University Student Index</h1>
            <p class="lead">Find and compare university costs in the UK</p>
        </div>
    </div>

    <div class="row justify-content-center mb-5">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-body">
                    <h2 class="card-title text-center mb-4">Search for your university</h2>
                    <div class="input-group input-group-lg">
                        <input type="text" class="form-control" placeholder="Start typing university name or city..."
                                @bind-value="searchTerm" @bind-value:event="oninput" @onkeyup="FilterUniversities">
                        <button class="btn btn-primary" type="button">
                            <i class="bi bi-search"></i> Search
                        </button>
                    </div>

                    @if (!string.IsNullOrEmpty(searchTerm) && filteredUniversities.Count > 0)
                    {
                        <div class="list-group mt-2 search-results" style="max-height: 300px; overflow-y: auto;">
                            @foreach (var university in filteredUniversities)
                            {
                                <button type="button" class="list-group-item list-group-item-action"
                                        @onclick="() => SelectUniversity(university)">
                                    @university.UniversityName - @GetCityName(university.CityId)
                                </button>
                            }
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(searchTerm) && filteredUniversities.Count == 0)
                    {
                        <div class="alert alert-info mt-2">
                            No universities found matching "@searchTerm"
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (selectedUniversities.Count > 0)
    {
        <div class="row justify-content-center mb-4">
            <div class="col-md-6">
                <div class="card shadow">
                    <div class="card-body">
                        <h3 class="card-title">Select Duration</h3>
                        <select class="form-select form-select-lg mb-3" @bind="selectedWeeks">
                            <option value="44">44 Weeks (Standard Academic Year)</option>
                            <option value="51">51 Weeks (Full Year)</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (selectedUniversities.Count > 0)
    {
        <div class="row mb-5">
            <div class="col-12 mb-4">
                <div class="d-flex justify-content-between align-items-center">
                    <h2>University Comparison</h2>
                    @if (selectedUniversities.Count < 3)
                    {
                        <button class="btn btn-outline-primary" @onclick="() => isAddingToComparison = true">
                            <i class="bi bi-plus-lg"></i> Add University to Compare
                        </button>
                    }
                </div>
            </div>

            @foreach (var university in selectedUniversities)
            {
                <div class="col-md-@(12 / Math.Max(1, Math.Min(selectedUniversities.Count, 3)))">
                    <div class="card shadow h-100">
                        <div class="card-header bg-primary text-white">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="m-0">@university.UniversityName</h5>
                                <button class="btn btn-sm btn-outline-light"
                                        @onclick="() => RemoveUniversity(university)">
                                    <i class="bi bi-x-lg"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <p><strong>Location:</strong> @GetCityName(university.CityId)</p>

                            @if (universityCosts.TryGetValue(university.Id, out var cost) &&
                            citiesById.TryGetValue(university.CityId, out var city))
                            {
                                <div class="mb-4">
                                    <h6 class="border-bottom pb-2">Weekly Expenses</h6>
                                    <div class="row">
                                        <div class="col-7">Groceries</div>
                                        <div class="col-5 text-end fw-bold">
                                            @FormatCost(GetGroceriesCost(cost))
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-7">Entertainment</div>
                                        <div class="col-5 text-end fw-bold">
                                            @FormatCost(GetEntertainmentCost(city))
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-7">Accommodation</div>
                                        <div class="col-5 text-end fw-bold">
                                            @FormatCost(cost.AccommodationCostPerWeek)
                                        </div>
                                    </div>
                                </div>

                                <div class="alert alert-info">
                                    <div class="row align-items-center">
                                        <div class="col-7">
                                            <h6 class="mb-0">Total for @selectedWeeks weeks:</h6>
                                        </div>
                                        <div class="col-5 text-end">
                                            <h5 class="mb-0">£@CalculateTotalCost(cost, city, selectedWeeks).ToString("N0")</h5>
                                        </div>
                                    </div>
                                </div>

                                <div class="mt-3">
                                    <p class="mb-0"><strong>Available Student Jobs:</strong> @(city.Jobs?.PartTimeJobPostings ?? "Data not available")</p>
                                    <p class="mb-0"><strong>Median Wage:</strong> £@(city.Jobs?.MedianWage ?? 0)/hour</p>
                                    <p class="mb-0"><strong>Employment Rate:</strong> @(((city.Jobs?.EmploymentRate ?? 0) * 100).ToString("F0"))%</p>
                                </div>

                                @if (cost.Groceries?.Accommodations?.Count > 0)
                                {
                                    <div class="mt-4">
                                        <h6 class="border-bottom pb-2">Accommodation Details</h6>
                                        @foreach (var accommodation in cost.Groceries.Accommodations)
                                        {
                                            <div class="mb-2">
                                                <p class="mb-1"><strong>@accommodation.Name</strong> @(accommodation.UniversityOwned ? "(University Owned)" : "")</p>
                                                <p class="mb-1 small">Nearest supermarket: @accommodation.NearestSupermarket</p>
                                                <p class="mb-0 small">Average grocery cost: £@accommodation.AverageSupermarketCost/week</p>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="alert alert-warning">
                                    No cost information available for this university
                                </div>
                            }
                        </div>
                        <div class="card-footer">
                            @if (!string.IsNullOrEmpty(university.Url))
                            {
                                <a href="@university.Url" target="_blank" class="btn btn-outline-primary w-100">
                                    Visit University Website
                                </a>
                            }
                            else
                            {
                                <button class="btn btn-outline-secondary w-100" disabled>
                                    No Website Available
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private string searchTerm = string.Empty;
    private List<University> allUniversities = new();
    private List<City> allCities = new();
    private Dictionary<int, City> citiesById = new();
    private List<University> filteredUniversities = new();
    private List<University> selectedUniversities = new();
    private Dictionary<int, UniversityCost> universityCosts = new();
    private int selectedWeeks = 44;
    private bool isAddingToComparison = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCities();
        await LoadUniversities();
        await LoadCosts();
    }

    private async Task LoadCities()
    {
        allCities = await Http.GetFromJsonAsync<List<City>>("data/cities.json") ?? [];
        citiesById = allCities.ToDictionary(c => c.Id);
    }

    private async Task LoadUniversities()
    {
        allUniversities = await Http.GetFromJsonAsync<List<University>>("data/universities.json") ?? [];
    }

    private async Task LoadCosts()
    {
        var costs = await Http.GetFromJsonAsync<List<UniversityCost>>("data/costs.json") ?? [];
        universityCosts = costs.ToDictionary(c => c.UniversityId);
    }

    private void FilterUniversities()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredUniversities.Clear();
            return;
        }

        filteredUniversities = allUniversities
            .Where(u => u.UniversityName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                      GetCityName(u.CityId).Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private string GetCityName(int cityId)
    {
        return citiesById.TryGetValue(cityId, out var city) ? city.CityName : "Unknown";
    }

    private void SelectUniversity(University university)
    {
        if (isAddingToComparison)
        {
            if (!selectedUniversities.Any(u => u.Id == university.Id) && selectedUniversities.Count < 3)
            {
                selectedUniversities.Add(university);
            }
            isAddingToComparison = false;
        }
        else
        {
            selectedUniversities.Clear();
            selectedUniversities.Add(university);
        }

        searchTerm = string.Empty;
        filteredUniversities.Clear();
    }

    private void RemoveUniversity(University university)
    {
        selectedUniversities.RemoveAll(u => u.Id == university.Id);
    }

    private string GetGroceriesCost(UniversityCost cost)
    {
        if (cost?.Groceries?.Accommodations == null || !cost.Groceries.Accommodations.Any())
            return "0.00";

        decimal averageCost = cost.Groceries.Accommodations.Average(a => a.AverageSupermarketCost);
        return averageCost.ToString("F2");
    }

    private string GetEntertainmentCost(City city)
    {
        if (city?.Entertainment == null)
            return "0.00";

        decimal total = city.Entertainment.GoingOut + city.Entertainment.HealthAndWellness + city.Entertainment.HolidayAndEvents;
        return total.ToString("F2");
    }

    private decimal CalculateTotalCost(UniversityCost cost, City city, int weeks)
    {
        decimal groceries = decimal.TryParse(GetGroceriesCost(cost), out var g) ? g : 0;
        decimal entertainment = city?.Entertainment != null ?
            (city.Entertainment.GoingOut + city.Entertainment.HealthAndWellness + city.Entertainment.HolidayAndEvents) : 0;
        decimal accommodation = decimal.TryParse(cost.AccommodationCostPerWeek, out var a) ? a : 0;

        return (groceries + entertainment + accommodation) * weeks;
    }

    private string FormatCost(string cost)
    {
        return string.IsNullOrEmpty(cost) ? "Data not available" : $"£{cost}/week";
    }
}